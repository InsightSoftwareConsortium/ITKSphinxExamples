name: Build, test, publish

on: [push,pull_request]

jobs:
  build-test-cxx:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        include:
          - os: ubuntu-18.04
            c-compiler: "gcc"
            cxx-compiler: "g++"
            itk-git-tag: "a89145bccda6a36f42cfdd45d3a6b27234ff54fe"
            cmake-build-type: "MinSizeRel"
          - os: windows-2019
            c-compiler: "cl.exe"
            cxx-compiler: "cl.exe"
            itk-git-tag: "a89145bccda6a36f42cfdd45d3a6b27234ff54fe"
            cmake-build-type: "Release"
          - os: macos-10.15
            c-compiler: "clang"
            cxx-compiler: "clang++"
            itk-git-tag: "a89145bccda6a36f42cfdd45d3a6b27234ff54fe"
            cmake-build-type: "MinSizeRel"

    steps:
      - uses: actions/checkout@v2
        with:
          path: Ex

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja

      - name: Get specific version of CMake, Ninja
        uses: lukka/get-cmake@v3.18.3

      - name: Download ITK
        run: |
          cd ..
          git clone https://github.com/InsightSoftwareConsortium/ITK.git
          cd ITK
          git checkout ${{ matrix.itk-git-tag }}

      - name: Build ITK
        if: matrix.os != 'windows-2019'
        run: |
          cd ..
          mkdir ITK-build
          cd ITK-build
          cmake -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.cmake-build-type }} -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
          ninja
      - name: Build ITK
        if: matrix.os == 'windows-2019'
        run: |
          cd ..
          mkdir ITK-build
          cd ITK-build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.cmake-build-type }} -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
          ninja
        shell: cmd

      - name: Fetch CTest driver script
        run: |
          curl -L https://raw.githubusercontent.com/InsightSoftwareConsortium/ITK/dashboard/itk_common.cmake -O
      - name: Configure CTest script
        shell: bash
        run: |
          mv Ex ../../
          operating_system="${{ matrix.os }}"
          cat > dashboard.cmake << EOF
          set(CTEST_SITE "GitHubActions")
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/.." CTEST_DASHBOARD_ROOT)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../Ex" CTEST_SOURCE_DIRECTORY)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../bld/" CTEST_BINARY_DIRECTORY)
          set(dashboard_source_name "${GITHUB_REPOSITORY}")
          if(ENV{GITHUB_REF} MATCHES "master")
            set(branch "-master")
            set(dashboard_model "Continuous")
          else()
            set(branch "-${GITHUB_REF}")
            set(dashboard_model "Experimental")
          endif()
          set(CTEST_BUILD_NAME "${GITHUB_REPOSITORY}-${operating_system}-\${branch}")
          set(CTEST_UPDATE_VERSION_ONLY 1)
          set(CTEST_TEST_ARGS \${CTEST_TEST_ARGS} PARALLEL_LEVEL \${PARALLEL_LEVEL})
          set(CTEST_BUILD_CONFIGURATION "Release")
          set(CTEST_CMAKE_GENERATOR "Ninja")
          set(CTEST_CUSTOM_WARNING_EXCEPTION
            \${CTEST_CUSTOM_WARNING_EXCEPTION}
            # macOS Azure VM Warning
            "ld: warning: text-based stub file"
            )
          set(dashboard_no_clean 1)
          set(ENV{CC} ${{ matrix.c-compiler }})
          set(ENV{CXX} ${{ matrix.cxx-compiler }})
          set(dashboard_cache "
          ITK_DIR:PATH=\${CTEST_DASHBOARD_ROOT}/ITK-build
          BUILD_TESTING:BOOL=ON
          ")
          string(TIMESTAMP build_date "%Y-%m-%d")
          message("CDash Build Identifier: \${build_date} \${CTEST_BUILD_NAME}")
          message("CTEST_SITE = \${CTEST_SITE}")
          include(\${CTEST_SCRIPT_DIRECTORY}/itk_common.cmake)
          EOF
          cat dashboard.cmake
      - name: Build and test
        if: matrix.os != 'windows-2019'
        run: |
          ctest -j 2 -VV -S dashboard.cmake
      - name: Build and test
        if: matrix.os == 'windows-2019'
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ctest -j 2 -VV -S dashboard.cmake
        shell: cmd

  build-test-python-superbuild:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        include:
          - os: ubuntu-18.04
            c-compiler: "gcc"
            cxx-compiler: "g++"
            cmake-build-type: "MinSizeRel"
          - os: windows-2019
            c-compiler: "cl.exe"
            cxx-compiler: "cl.exe"
            cmake-build-type: "Release"
          - os: macos-10.15
            c-compiler: "clang"
            cxx-compiler: "clang++"
            cmake-build-type: "MinSizeRel"

    steps:
      - uses: actions/checkout@v2
        with:
          path: Ex

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja

      - name: Get specific version of CMake, Ninja
        uses: lukka/get-cmake@v3.18.3

      - name: Fetch CTest driver script
        run: |
          curl -L https://raw.githubusercontent.com/InsightSoftwareConsortium/ITKSphinxExamples/dashboard/itkexamples_common.cmake -O

      - name: Configure CTest script
        shell: bash
        run: |
          mv Ex ../../
          operating_system="${{ matrix.os }}"
          cat > dashboard.cmake << EOF
          set(CTEST_SITE "GitHubActions")
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/.." CTEST_DASHBOARD_ROOT)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../Ex" CTEST_SOURCE_DIRECTORY)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../bld/" CTEST_BINARY_DIRECTORY)
          set(dashboard_superbuild 1)
          if(ENV{GITHUB_REF} MATCHES "master")
            set(branch "-master")
            set(dashboard_model "Continuous")
          else()
            set(branch "-${GITHUB_REF}")
            set(dashboard_model "Experimental")
          endif()
          set(CTEST_BUILD_NAME "${GITHUB_REPOSITORY}-${operating_system}-\${branch}")
          set(CTEST_UPDATE_VERSION_ONLY 1)
          set(CTEST_TEST_ARGS \${CTEST_TEST_ARGS} PARALLEL_LEVEL \${PARALLEL_LEVEL})
          set(CTEST_BUILD_CONFIGURATION "Release")
          set(CTEST_CMAKE_GENERATOR "Ninja")
          set(CTEST_CUSTOM_WARNING_EXCEPTION
            \${CTEST_CUSTOM_WARNING_EXCEPTION}
            # macOS Azure VM Warning
            "ld: warning: text-based stub file"
            )
          set(dashboard_no_clean 1)
          set(ENV{CC} ${{ matrix.c-compiler }})
          set(ENV{CXX} ${{ matrix.cxx-compiler }})
          if(WIN32)
            set(ENV{PATH} "\${CTEST_DASHBOARD_ROOT}/ITK-build/bin;\$ENV{PATH}")
          endif()
          set(dashboard_cache "
          USE_GIT_PROTOCOL:BOOL=OFF
          BUILD_TESTING:BOOL=ON
          ")
          string(TIMESTAMP build_date "%Y-%m-%d")
          message("CDash Build Identifier: \${build_date} \${CTEST_BUILD_NAME}")
          message("CTEST_SITE = \${CTEST_SITE}")
          include(\${CTEST_SCRIPT_DIRECTORY}/itkexamples_common.cmake)
          EOF
          cat dashboard.cmake

      - name: Build and test
        if: matrix.os != 'windows-2019'
        run: |
          ctest -j 2 -VV -S dashboard.cmake

      - name: Build and test
        if: matrix.os == 'windows-2019'
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ctest -j 2 -VV -S dashboard.cmake
        shell: cmd

  build-test-notebooks:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
            python-version: 3.7

      - name: Install build dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install ninja
            python -m pip install itk>=5.2.0.post2
            python -m pip install matplotlib
            python -m pip install itkwidgets

      - name: Test notebooks
        uses: treebeardtech/nbmake-action@v0.2.1

  build-test-documentation:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-18.04]
        include:
          - os: ubuntu-18.04
            c-compiler: "gcc"
            cxx-compiler: "g++"
            itk-git-tag: "a89145bccda6a36f42cfdd45d3a6b27234ff54fe"
            cmake-build-type: "Release"

    steps:
      - uses: actions/checkout@v2
        with:
          path: Ex
          submodules: recursive

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Get specific version of CMake, Ninja
        uses: lukka/get-cmake@v3.18.3

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gnuplot dvipng
          sudo apt-get install texlive-full
          sudo apt-get install pandoc
          sudo apt-get install imagemagick

          python -m pip install --upgrade pip
          python -m pip install ninja
          python -m pip install 'sphinx==4.4.0' 'docutils<0.18'
          python -m pip install --ignore-installed six
          python -m pip install ipython

      - name: Remove Duplicate Declaration Warnings
        run: |
          SITE_PACKAGES_DIR=$(python3 "-c" "from distutils import sysconfig; print(sysconfig.get_python_lib())")
          sed -i "6559d" ${SITE_PACKAGES_DIR}/sphinx/domains/cpp.py

      - name: Fetch CTest driver script
        run: |
          curl -L https://raw.githubusercontent.com/InsightSoftwareConsortium/ITKSphinxExamples/dashboard/itkexamples_common.cmake -O

      - name: Configure CTest script
        shell: bash
        run: |
          mv Ex ../../
          operating_system="${{ matrix.os }}"
          cat > dashboard.cmake << EOF
          set(CTEST_SITE "GitHubActions")
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/.." CTEST_DASHBOARD_ROOT)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../Ex" CTEST_SOURCE_DIRECTORY)
          file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../../bld/" CTEST_BINARY_DIRECTORY)
          set(dashboard_superbuild 1)
          if(ENV{GITHUB_REF} MATCHES "master")
            set(branch "-master")
            set(dashboard_model "Continuous")
          else()
            set(branch "-${GITHUB_REF}")
            set(dashboard_model "Experimental")
          endif()
          set(CTEST_BUILD_NAME "${GITHUB_REPOSITORY}-${operating_system}-\${branch}-docs")
          set(CTEST_UPDATE_VERSION_ONLY 1)
          set(CTEST_TEST_ARGS \${CTEST_TEST_ARGS} PARALLEL_LEVEL \${PARALLEL_LEVEL})
          set(CTEST_BUILD_CONFIGURATION "Release")
          set(CTEST_CMAKE_GENERATOR "Ninja")
          set(CTEST_CUSTOM_WARNING_EXCEPTION
            \${CTEST_CUSTOM_WARNING_EXCEPTION}
            # macOS Azure VM Warning
            "ld: warning: text-based stub file"
            # breathelink warning
            "WARNING: Duplicate C"
            )
          set(dashboard_no_clean 1)
          set(ENV{CC} ${{ matrix.c-compiler }})
          set(ENV{CXX} ${{ matrix.cxx-compiler }})
          if(WIN32)
            set(ENV{PATH} "\${CTEST_DASHBOARD_ROOT}/ITK-build/bin;\$ENV{PATH}")
          endif()
          set(dashboard_cache "
          USE_GIT_PROTOCOL:BOOL=OFF
          BUILD_TESTING:BOOL=ON
          BUILD_DOCUMENTATION:BOOL=ON
          ")
          string(TIMESTAMP build_date "%Y-%m-%d")
          message("CDash Build Identifier: \${build_date} \${CTEST_BUILD_NAME}")
          message("CTEST_SITE = \${CTEST_SITE}")
          include(\${CTEST_SCRIPT_DIRECTORY}/itkexamples_common.cmake)
          EOF
          cat dashboard.cmake

      - name: Build and test
        run: |
          ctest -j 2 -VV -S dashboard.cmake

      - name: Publish Documentation html as GitHub Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Documentation
          path: |
            /home/runner/work/bld/ITKEx-build/ITKSphinxExamples-*-html.tar.gz
            /home/runner/work/bld/ITKEx-build/ITKSphinxExamples-*-html.zip

      - name: Unpack site
        shell: bash
        run: |
          mkdir /home/runner/work/site
          tar --strip-components=1 -xf /home/runner/work/bld/ITKEx-build/ITKSphinxExamples-*-html.tar.gz -C /home/runner/work/site

      - name: Deploy website to Fleek
        uses: fleekhq/action-deploy@v1
        id: deploy
        with:
          apiKey: ${{ secrets.FLEEK_API_KEY }}
        timeout-minutes: 15

      - name: Get Fleek output URL
        run: echo "Deploy url is ${{ steps.deploy.outputs.deployUrl }}"
